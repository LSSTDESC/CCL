# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ccllib', [dirname(__file__)])
        except ImportError:
            import _ccllib
            return _ccllib
        if fp is not None:
            try:
                _mod = imp.load_module('_ccllib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ccllib = swig_import_helper()
    del swig_import_helper
else:
    import _ccllib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class parameters(_object):
    """Proxy of C ccl_parameters struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Omega_c"] = _ccllib.parameters_Omega_c_set
    __swig_getmethods__["Omega_c"] = _ccllib.parameters_Omega_c_get
    if _newclass:Omega_c = _swig_property(_ccllib.parameters_Omega_c_get, _ccllib.parameters_Omega_c_set)
    __swig_setmethods__["Omega_b"] = _ccllib.parameters_Omega_b_set
    __swig_getmethods__["Omega_b"] = _ccllib.parameters_Omega_b_get
    if _newclass:Omega_b = _swig_property(_ccllib.parameters_Omega_b_get, _ccllib.parameters_Omega_b_set)
    __swig_setmethods__["Omega_m"] = _ccllib.parameters_Omega_m_set
    __swig_getmethods__["Omega_m"] = _ccllib.parameters_Omega_m_get
    if _newclass:Omega_m = _swig_property(_ccllib.parameters_Omega_m_get, _ccllib.parameters_Omega_m_set)
    __swig_setmethods__["Omega_k"] = _ccllib.parameters_Omega_k_set
    __swig_getmethods__["Omega_k"] = _ccllib.parameters_Omega_k_get
    if _newclass:Omega_k = _swig_property(_ccllib.parameters_Omega_k_get, _ccllib.parameters_Omega_k_set)
    __swig_setmethods__["sqrtk"] = _ccllib.parameters_sqrtk_set
    __swig_getmethods__["sqrtk"] = _ccllib.parameters_sqrtk_get
    if _newclass:sqrtk = _swig_property(_ccllib.parameters_sqrtk_get, _ccllib.parameters_sqrtk_set)
    __swig_setmethods__["k_sign"] = _ccllib.parameters_k_sign_set
    __swig_getmethods__["k_sign"] = _ccllib.parameters_k_sign_get
    if _newclass:k_sign = _swig_property(_ccllib.parameters_k_sign_get, _ccllib.parameters_k_sign_set)
    __swig_setmethods__["w0"] = _ccllib.parameters_w0_set
    __swig_getmethods__["w0"] = _ccllib.parameters_w0_get
    if _newclass:w0 = _swig_property(_ccllib.parameters_w0_get, _ccllib.parameters_w0_set)
    __swig_setmethods__["wa"] = _ccllib.parameters_wa_set
    __swig_getmethods__["wa"] = _ccllib.parameters_wa_get
    if _newclass:wa = _swig_property(_ccllib.parameters_wa_get, _ccllib.parameters_wa_set)
    __swig_setmethods__["H0"] = _ccllib.parameters_H0_set
    __swig_getmethods__["H0"] = _ccllib.parameters_H0_get
    if _newclass:H0 = _swig_property(_ccllib.parameters_H0_get, _ccllib.parameters_H0_set)
    __swig_setmethods__["h"] = _ccllib.parameters_h_set
    __swig_getmethods__["h"] = _ccllib.parameters_h_get
    if _newclass:h = _swig_property(_ccllib.parameters_h_get, _ccllib.parameters_h_set)
    __swig_setmethods__["N_nu_mass"] = _ccllib.parameters_N_nu_mass_set
    __swig_getmethods__["N_nu_mass"] = _ccllib.parameters_N_nu_mass_get
    if _newclass:N_nu_mass = _swig_property(_ccllib.parameters_N_nu_mass_get, _ccllib.parameters_N_nu_mass_set)
    __swig_setmethods__["N_nu_rel"] = _ccllib.parameters_N_nu_rel_set
    __swig_getmethods__["N_nu_rel"] = _ccllib.parameters_N_nu_rel_get
    if _newclass:N_nu_rel = _swig_property(_ccllib.parameters_N_nu_rel_get, _ccllib.parameters_N_nu_rel_set)
    __swig_setmethods__["mnu"] = _ccllib.parameters_mnu_set
    __swig_getmethods__["mnu"] = _ccllib.parameters_mnu_get
    if _newclass:mnu = _swig_property(_ccllib.parameters_mnu_get, _ccllib.parameters_mnu_set)
    __swig_setmethods__["Omega_n_mass"] = _ccllib.parameters_Omega_n_mass_set
    __swig_getmethods__["Omega_n_mass"] = _ccllib.parameters_Omega_n_mass_get
    if _newclass:Omega_n_mass = _swig_property(_ccllib.parameters_Omega_n_mass_get, _ccllib.parameters_Omega_n_mass_set)
    __swig_setmethods__["Omega_n_rel"] = _ccllib.parameters_Omega_n_rel_set
    __swig_getmethods__["Omega_n_rel"] = _ccllib.parameters_Omega_n_rel_get
    if _newclass:Omega_n_rel = _swig_property(_ccllib.parameters_Omega_n_rel_get, _ccllib.parameters_Omega_n_rel_set)
    __swig_setmethods__["A_s"] = _ccllib.parameters_A_s_set
    __swig_getmethods__["A_s"] = _ccllib.parameters_A_s_get
    if _newclass:A_s = _swig_property(_ccllib.parameters_A_s_get, _ccllib.parameters_A_s_set)
    __swig_setmethods__["n_s"] = _ccllib.parameters_n_s_set
    __swig_getmethods__["n_s"] = _ccllib.parameters_n_s_get
    if _newclass:n_s = _swig_property(_ccllib.parameters_n_s_get, _ccllib.parameters_n_s_set)
    __swig_setmethods__["Omega_g"] = _ccllib.parameters_Omega_g_set
    __swig_getmethods__["Omega_g"] = _ccllib.parameters_Omega_g_get
    if _newclass:Omega_g = _swig_property(_ccllib.parameters_Omega_g_get, _ccllib.parameters_Omega_g_set)
    __swig_setmethods__["T_CMB"] = _ccllib.parameters_T_CMB_set
    __swig_getmethods__["T_CMB"] = _ccllib.parameters_T_CMB_get
    if _newclass:T_CMB = _swig_property(_ccllib.parameters_T_CMB_get, _ccllib.parameters_T_CMB_set)
    __swig_setmethods__["sigma_8"] = _ccllib.parameters_sigma_8_set
    __swig_getmethods__["sigma_8"] = _ccllib.parameters_sigma_8_get
    if _newclass:sigma_8 = _swig_property(_ccllib.parameters_sigma_8_get, _ccllib.parameters_sigma_8_set)
    __swig_setmethods__["Omega_l"] = _ccllib.parameters_Omega_l_set
    __swig_getmethods__["Omega_l"] = _ccllib.parameters_Omega_l_get
    if _newclass:Omega_l = _swig_property(_ccllib.parameters_Omega_l_get, _ccllib.parameters_Omega_l_set)
    __swig_setmethods__["z_star"] = _ccllib.parameters_z_star_set
    __swig_getmethods__["z_star"] = _ccllib.parameters_z_star_get
    if _newclass:z_star = _swig_property(_ccllib.parameters_z_star_get, _ccllib.parameters_z_star_set)
    __swig_setmethods__["has_mgrowth"] = _ccllib.parameters_has_mgrowth_set
    __swig_getmethods__["has_mgrowth"] = _ccllib.parameters_has_mgrowth_get
    if _newclass:has_mgrowth = _swig_property(_ccllib.parameters_has_mgrowth_get, _ccllib.parameters_has_mgrowth_set)
    __swig_setmethods__["nz_mgrowth"] = _ccllib.parameters_nz_mgrowth_set
    __swig_getmethods__["nz_mgrowth"] = _ccllib.parameters_nz_mgrowth_get
    if _newclass:nz_mgrowth = _swig_property(_ccllib.parameters_nz_mgrowth_get, _ccllib.parameters_nz_mgrowth_set)
    __swig_setmethods__["z_mgrowth"] = _ccllib.parameters_z_mgrowth_set
    __swig_getmethods__["z_mgrowth"] = _ccllib.parameters_z_mgrowth_get
    if _newclass:z_mgrowth = _swig_property(_ccllib.parameters_z_mgrowth_get, _ccllib.parameters_z_mgrowth_set)
    __swig_setmethods__["df_mgrowth"] = _ccllib.parameters_df_mgrowth_set
    __swig_getmethods__["df_mgrowth"] = _ccllib.parameters_df_mgrowth_get
    if _newclass:df_mgrowth = _swig_property(_ccllib.parameters_df_mgrowth_get, _ccllib.parameters_df_mgrowth_set)
    def __init__(self): 
        """__init__(ccl_parameters self) -> parameters"""
        this = _ccllib.new_parameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccllib.delete_parameters
    __del__ = lambda self : None;
parameters_swigregister = _ccllib.parameters_swigregister
parameters_swigregister(parameters)

class data(_object):
    """Proxy of C ccl_data struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["growth0"] = _ccllib.data_growth0_set
    __swig_getmethods__["growth0"] = _ccllib.data_growth0_get
    if _newclass:growth0 = _swig_property(_ccllib.data_growth0_get, _ccllib.data_growth0_set)
    __swig_setmethods__["chi"] = _ccllib.data_chi_set
    __swig_getmethods__["chi"] = _ccllib.data_chi_get
    if _newclass:chi = _swig_property(_ccllib.data_chi_get, _ccllib.data_chi_set)
    __swig_setmethods__["growth"] = _ccllib.data_growth_set
    __swig_getmethods__["growth"] = _ccllib.data_growth_get
    if _newclass:growth = _swig_property(_ccllib.data_growth_get, _ccllib.data_growth_set)
    __swig_setmethods__["fgrowth"] = _ccllib.data_fgrowth_set
    __swig_getmethods__["fgrowth"] = _ccllib.data_fgrowth_get
    if _newclass:fgrowth = _swig_property(_ccllib.data_fgrowth_get, _ccllib.data_fgrowth_set)
    __swig_setmethods__["E"] = _ccllib.data_E_set
    __swig_getmethods__["E"] = _ccllib.data_E_get
    if _newclass:E = _swig_property(_ccllib.data_E_get, _ccllib.data_E_set)
    __swig_setmethods__["achi"] = _ccllib.data_achi_set
    __swig_getmethods__["achi"] = _ccllib.data_achi_get
    if _newclass:achi = _swig_property(_ccllib.data_achi_get, _ccllib.data_achi_set)
    __swig_setmethods__["accelerator"] = _ccllib.data_accelerator_set
    __swig_getmethods__["accelerator"] = _ccllib.data_accelerator_get
    if _newclass:accelerator = _swig_property(_ccllib.data_accelerator_get, _ccllib.data_accelerator_set)
    __swig_setmethods__["accelerator_achi"] = _ccllib.data_accelerator_achi_set
    __swig_getmethods__["accelerator_achi"] = _ccllib.data_accelerator_achi_get
    if _newclass:accelerator_achi = _swig_property(_ccllib.data_accelerator_achi_get, _ccllib.data_accelerator_achi_set)
    __swig_setmethods__["accelerator_m"] = _ccllib.data_accelerator_m_set
    __swig_getmethods__["accelerator_m"] = _ccllib.data_accelerator_m_get
    if _newclass:accelerator_m = _swig_property(_ccllib.data_accelerator_m_get, _ccllib.data_accelerator_m_set)
    __swig_setmethods__["accelerator_d"] = _ccllib.data_accelerator_d_set
    __swig_getmethods__["accelerator_d"] = _ccllib.data_accelerator_d_get
    if _newclass:accelerator_d = _swig_property(_ccllib.data_accelerator_d_get, _ccllib.data_accelerator_d_set)
    __swig_setmethods__["accelerator_k"] = _ccllib.data_accelerator_k_set
    __swig_getmethods__["accelerator_k"] = _ccllib.data_accelerator_k_get
    if _newclass:accelerator_k = _swig_property(_ccllib.data_accelerator_k_get, _ccllib.data_accelerator_k_set)
    __swig_setmethods__["logsigma"] = _ccllib.data_logsigma_set
    __swig_getmethods__["logsigma"] = _ccllib.data_logsigma_get
    if _newclass:logsigma = _swig_property(_ccllib.data_logsigma_get, _ccllib.data_logsigma_set)
    __swig_setmethods__["dlnsigma_dlogm"] = _ccllib.data_dlnsigma_dlogm_set
    __swig_getmethods__["dlnsigma_dlogm"] = _ccllib.data_dlnsigma_dlogm_get
    if _newclass:dlnsigma_dlogm = _swig_property(_ccllib.data_dlnsigma_dlogm_get, _ccllib.data_dlnsigma_dlogm_set)
    __swig_setmethods__["alphahmf"] = _ccllib.data_alphahmf_set
    __swig_getmethods__["alphahmf"] = _ccllib.data_alphahmf_get
    if _newclass:alphahmf = _swig_property(_ccllib.data_alphahmf_get, _ccllib.data_alphahmf_set)
    __swig_setmethods__["betahmf"] = _ccllib.data_betahmf_set
    __swig_getmethods__["betahmf"] = _ccllib.data_betahmf_get
    if _newclass:betahmf = _swig_property(_ccllib.data_betahmf_get, _ccllib.data_betahmf_set)
    __swig_setmethods__["gammahmf"] = _ccllib.data_gammahmf_set
    __swig_getmethods__["gammahmf"] = _ccllib.data_gammahmf_get
    if _newclass:gammahmf = _swig_property(_ccllib.data_gammahmf_get, _ccllib.data_gammahmf_set)
    __swig_setmethods__["phihmf"] = _ccllib.data_phihmf_set
    __swig_getmethods__["phihmf"] = _ccllib.data_phihmf_get
    if _newclass:phihmf = _swig_property(_ccllib.data_phihmf_get, _ccllib.data_phihmf_set)
    __swig_setmethods__["etahmf"] = _ccllib.data_etahmf_set
    __swig_getmethods__["etahmf"] = _ccllib.data_etahmf_get
    if _newclass:etahmf = _swig_property(_ccllib.data_etahmf_get, _ccllib.data_etahmf_set)
    __swig_setmethods__["p_lin"] = _ccllib.data_p_lin_set
    __swig_getmethods__["p_lin"] = _ccllib.data_p_lin_get
    if _newclass:p_lin = _swig_property(_ccllib.data_p_lin_get, _ccllib.data_p_lin_set)
    __swig_setmethods__["p_nl"] = _ccllib.data_p_nl_set
    __swig_getmethods__["p_nl"] = _ccllib.data_p_nl_get
    if _newclass:p_nl = _swig_property(_ccllib.data_p_nl_get, _ccllib.data_p_nl_set)
    __swig_setmethods__["k_min"] = _ccllib.data_k_min_set
    __swig_getmethods__["k_min"] = _ccllib.data_k_min_get
    if _newclass:k_min = _swig_property(_ccllib.data_k_min_get, _ccllib.data_k_min_set)
    def __init__(self): 
        """__init__(ccl_data self) -> data"""
        this = _ccllib.new_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccllib.delete_data
    __del__ = lambda self : None;
data_swigregister = _ccllib.data_swigregister
data_swigregister(data)

class cosmology(_object):
    """Proxy of C ccl_cosmology struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cosmology, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cosmology, name)
    __repr__ = _swig_repr
    __swig_setmethods__["params"] = _ccllib.cosmology_params_set
    __swig_getmethods__["params"] = _ccllib.cosmology_params_get
    if _newclass:params = _swig_property(_ccllib.cosmology_params_get, _ccllib.cosmology_params_set)
    __swig_setmethods__["config"] = _ccllib.cosmology_config_set
    __swig_getmethods__["config"] = _ccllib.cosmology_config_get
    if _newclass:config = _swig_property(_ccllib.cosmology_config_get, _ccllib.cosmology_config_set)
    __swig_setmethods__["data"] = _ccllib.cosmology_data_set
    __swig_getmethods__["data"] = _ccllib.cosmology_data_get
    if _newclass:data = _swig_property(_ccllib.cosmology_data_get, _ccllib.cosmology_data_set)
    __swig_setmethods__["computed_distances"] = _ccllib.cosmology_computed_distances_set
    __swig_getmethods__["computed_distances"] = _ccllib.cosmology_computed_distances_get
    if _newclass:computed_distances = _swig_property(_ccllib.cosmology_computed_distances_get, _ccllib.cosmology_computed_distances_set)
    __swig_setmethods__["computed_growth"] = _ccllib.cosmology_computed_growth_set
    __swig_getmethods__["computed_growth"] = _ccllib.cosmology_computed_growth_get
    if _newclass:computed_growth = _swig_property(_ccllib.cosmology_computed_growth_get, _ccllib.cosmology_computed_growth_set)
    __swig_setmethods__["computed_power"] = _ccllib.cosmology_computed_power_set
    __swig_getmethods__["computed_power"] = _ccllib.cosmology_computed_power_get
    if _newclass:computed_power = _swig_property(_ccllib.cosmology_computed_power_get, _ccllib.cosmology_computed_power_set)
    __swig_setmethods__["computed_sigma"] = _ccllib.cosmology_computed_sigma_set
    __swig_getmethods__["computed_sigma"] = _ccllib.cosmology_computed_sigma_get
    if _newclass:computed_sigma = _swig_property(_ccllib.cosmology_computed_sigma_get, _ccllib.cosmology_computed_sigma_set)
    __swig_setmethods__["computed_hmfparams"] = _ccllib.cosmology_computed_hmfparams_set
    __swig_getmethods__["computed_hmfparams"] = _ccllib.cosmology_computed_hmfparams_get
    if _newclass:computed_hmfparams = _swig_property(_ccllib.cosmology_computed_hmfparams_get, _ccllib.cosmology_computed_hmfparams_set)
    __swig_setmethods__["status"] = _ccllib.cosmology_status_set
    __swig_getmethods__["status"] = _ccllib.cosmology_status_get
    if _newclass:status = _swig_property(_ccllib.cosmology_status_get, _ccllib.cosmology_status_set)
    __swig_setmethods__["status_message"] = _ccllib.cosmology_status_message_set
    __swig_getmethods__["status_message"] = _ccllib.cosmology_status_message_get
    if _newclass:status_message = _swig_property(_ccllib.cosmology_status_message_get, _ccllib.cosmology_status_message_set)
    def __init__(self): 
        """__init__(ccl_cosmology self) -> cosmology"""
        this = _ccllib.new_cosmology()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccllib.delete_cosmology
    __del__ = lambda self : None;
cosmology_swigregister = _ccllib.cosmology_swigregister
cosmology_swigregister(cosmology)


def cosmology_read_config():
  """cosmology_read_config()"""
  return _ccllib.cosmology_read_config()

def cosmology_create(*args):
  """cosmology_create(parameters params, configuration config) -> cosmology"""
  return _ccllib.cosmology_create(*args)

def cosmology_create_with_params(*args):
  """
    cosmology_create_with_params(double Omega_c, double Omega_b, double Omega_k, double N_nu_rel, double N_nu_mass, 
        double mnu, double w0, double wa, double h, double norm_pk, double n_s, int nz_mgrowth, 
        double * zarr_mgrowth, double * dfarr_mgrowth, configuration config, 
        int * status) -> cosmology
    """
  return _ccllib.cosmology_create_with_params(*args)

def cosmology_create_with_lcdm_params(*args):
  """
    cosmology_create_with_lcdm_params(double Omega_c, double Omega_b, double Omega_k, double h, double norm_pk, double n_s, 
        configuration config, int * status) -> cosmology
    """
  return _ccllib.cosmology_create_with_lcdm_params(*args)

def parameters_create(*args):
  """
    parameters_create(double Omega_c, double Omega_b, double Omega_k, double N_nu_rel, double N_nu_mass, 
        double mnu, double w0, double wa, double h, double norm_pk, double n_s, int nz_mgrowth, 
        double * zarr_mgrowth, double * dfarr_mgrowth, int * status) -> parameters
    """
  return _ccllib.parameters_create(*args)

def parameters_create_flat_lcdm(*args):
  """parameters_create_flat_lcdm(double Omega_c, double Omega_b, double h, double norm_pk, double n_s, int * status) -> parameters"""
  return _ccllib.parameters_create_flat_lcdm(*args)

def parameters_create_flat_wcdm(*args):
  """
    parameters_create_flat_wcdm(double Omega_c, double Omega_b, double w0, double h, double norm_pk, double n_s, 
        int * status) -> parameters
    """
  return _ccllib.parameters_create_flat_wcdm(*args)

def parameters_create_flat_wacdm(*args):
  """
    parameters_create_flat_wacdm(double Omega_c, double Omega_b, double w0, double wa, double h, double norm_pk, double n_s, 
        int * status) -> parameters
    """
  return _ccllib.parameters_create_flat_wacdm(*args)

def parameters_create_lcdm(*args):
  """
    parameters_create_lcdm(double Omega_c, double Omega_b, double Omega_k, double h, double norm_pk, double n_s, 
        int * status) -> parameters
    """
  return _ccllib.parameters_create_lcdm(*args)

def parameters_create_flat_lcdm_nu(*args):
  """
    parameters_create_flat_lcdm_nu(double Omega_c, double Omega_b, double h, double norm_pk, double n_s, double N_nu_rel, 
        double N_nu_mass, double mnu, int * status) -> parameters
    """
  return _ccllib.parameters_create_flat_lcdm_nu(*args)

def parameters_create_flat_wcdm_nu(*args):
  """
    parameters_create_flat_wcdm_nu(double Omega_c, double Omega_b, double w0, double h, double norm_pk, double n_s, 
        double N_nu_rel, double N_nu_mass, double mnu, int * status) -> parameters
    """
  return _ccllib.parameters_create_flat_wcdm_nu(*args)

def parameters_create_flat_wacdm_nu(*args):
  """
    parameters_create_flat_wacdm_nu(double Omega_c, double Omega_b, double w0, double wa, double h, double norm_pk, double n_s, 
        double N_nu_rel, double N_nu_mass, double mnu, int * status) -> parameters
    """
  return _ccllib.parameters_create_flat_wacdm_nu(*args)

def parameters_create_lcdm_nu(*args):
  """
    parameters_create_lcdm_nu(double Omega_c, double Omega_b, double Omega_k, double h, double norm_pk, double n_s, 
        double N_nu_rel, double N_nu_mass, double mnu, int * status) -> parameters
    """
  return _ccllib.parameters_create_lcdm_nu(*args)

def cosmology_free(*args):
  """cosmology_free(cosmology cosmo)"""
  return _ccllib.cosmology_free(*args)

def cosmology_compute_distances(*args):
  """cosmology_compute_distances(cosmology cosmo, int * status)"""
  return _ccllib.cosmology_compute_distances(*args)

def cosmology_compute_growth(*args):
  """cosmology_compute_growth(cosmology cosmo, int * status)"""
  return _ccllib.cosmology_compute_growth(*args)

def cosmology_compute_power(*args):
  """cosmology_compute_power(cosmology cosmo, int * status)"""
  return _ccllib.cosmology_compute_power(*args)

def parameters_create_vec(*args):
  """
    parameters_create_vec(double Omega_c, double Omega_b, double Omega_k, double N_nu_rel, double N_nu_mass, 
        double M_nu, double w0, double wa, double h, double norm_pk, double n_s, 
        double * zarr, double * dfarr, int * status) -> parameters
    """
  return _ccllib.parameters_create_vec(*args)
omega_m_label = _ccllib.omega_m_label
omega_l_label = _ccllib.omega_l_label
omega_g_label = _ccllib.omega_g_label
omega_k_label = _ccllib.omega_k_label
omega_ur_label = _ccllib.omega_ur_label
omega_nu_label = _ccllib.omega_nu_label

def h_over_h0(*args):
  """h_over_h0(cosmology cosmo, double a, int * status) -> double"""
  return _ccllib.h_over_h0(*args)

def h_over_h0s(*args):
  """h_over_h0s(cosmology cosmo, int na, double [] a, double [] output, int * status)"""
  return _ccllib.h_over_h0s(*args)

def comoving_radial_distance(*args):
  """comoving_radial_distance(cosmology cosmo, double a, int * status) -> double"""
  return _ccllib.comoving_radial_distance(*args)

def comoving_radial_distances(*args):
  """comoving_radial_distances(cosmology cosmo, int na, double [] a, double [] output, int * status)"""
  return _ccllib.comoving_radial_distances(*args)

def sinn(*args):
  """sinn(cosmology cosmo, double chi, int * status) -> double"""
  return _ccllib.sinn(*args)

def comoving_angular_distance(*args):
  """comoving_angular_distance(cosmology cosmo, double a, int * status) -> double"""
  return _ccllib.comoving_angular_distance(*args)

def comoving_angular_distances(*args):
  """comoving_angular_distances(cosmology cosmo, int na, double [] a, double [] output, int * status)"""
  return _ccllib.comoving_angular_distances(*args)

def luminosity_distance(*args):
  """luminosity_distance(cosmology cosmo, double a, int * status) -> double"""
  return _ccllib.luminosity_distance(*args)

def luminosity_distances(*args):
  """luminosity_distances(cosmology cosmo, int na, double [] a, double [] output, int * status)"""
  return _ccllib.luminosity_distances(*args)

def distance_modulus(*args):
  """distance_modulus(cosmology cosmo, double a, int * status) -> double"""
  return _ccllib.distance_modulus(*args)

def distance_moduli(*args):
  """distance_moduli(cosmology cosmo, int na, double [] a, double [] output, int * status)"""
  return _ccllib.distance_moduli(*args)

def growth_factor(*args):
  """growth_factor(cosmology cosmo, double a, int * status) -> double"""
  return _ccllib.growth_factor(*args)

def growth_factors(*args):
  """growth_factors(cosmology cosmo, int na, double [] a, double [] output, int * status)"""
  return _ccllib.growth_factors(*args)

def growth_factor_unnorm(*args):
  """growth_factor_unnorm(cosmology cosmo, double a, int * status) -> double"""
  return _ccllib.growth_factor_unnorm(*args)

def growth_factors_unnorm(*args):
  """growth_factors_unnorm(cosmology cosmo, int na, double [] a, double [] output, int * status)"""
  return _ccllib.growth_factors_unnorm(*args)

def growth_rate(*args):
  """growth_rate(cosmology cosmo, double a, int * status) -> double"""
  return _ccllib.growth_rate(*args)

def growth_rates(*args):
  """growth_rates(cosmology cosmo, int na, double [] a, double [] output, int * status)"""
  return _ccllib.growth_rates(*args)

def scale_factor_of_chi(*args):
  """scale_factor_of_chi(cosmology cosmo, double chi, int * status) -> double"""
  return _ccllib.scale_factor_of_chi(*args)

def scale_factor_of_chis(*args):
  """scale_factor_of_chis(cosmology cosmo, int nchi, double [] chi, double [] output, int * status)"""
  return _ccllib.scale_factor_of_chis(*args)

def omega_x(*args):
  """omega_x(cosmology cosmo, double a, ccl_omega_x_label label, int * status) -> double"""
  return _ccllib.omega_x(*args)

def growth_factor_vec(*args):
  """growth_factor_vec(cosmology cosmo, double * a, double * output, int * status)"""
  return _ccllib.growth_factor_vec(*args)

def growth_factor_unnorm_vec(*args):
  """growth_factor_unnorm_vec(cosmology cosmo, double * a, double * output, int * status)"""
  return _ccllib.growth_factor_unnorm_vec(*args)

def growth_rate_vec(*args):
  """growth_rate_vec(cosmology cosmo, double * a, double * output, int * status)"""
  return _ccllib.growth_rate_vec(*args)

def comoving_radial_distance_vec(*args):
  """comoving_radial_distance_vec(cosmology cosmo, double * a, double * output, int * status)"""
  return _ccllib.comoving_radial_distance_vec(*args)

def comoving_angular_distance_vec(*args):
  """comoving_angular_distance_vec(cosmology cosmo, double * a, double * output, int * status)"""
  return _ccllib.comoving_angular_distance_vec(*args)

def h_over_h0_vec(*args):
  """h_over_h0_vec(cosmology cosmo, double * a, double * output, int * status)"""
  return _ccllib.h_over_h0_vec(*args)

def luminosity_distance_vec(*args):
  """luminosity_distance_vec(cosmology cosmo, double * a, double * output, int * status)"""
  return _ccllib.luminosity_distance_vec(*args)

def distance_modulus_vec(*args):
  """distance_modulus_vec(cosmology cosmo, double * a, double * output, int * status)"""
  return _ccllib.distance_modulus_vec(*args)

def scale_factor_of_chi_vec(*args):
  """scale_factor_of_chi_vec(cosmology cosmo, double * chi, double * output, int * status)"""
  return _ccllib.scale_factor_of_chi_vec(*args)

def omega_x_vec(*args):
  """omega_x_vec(cosmology cosmo, int label, double * a, double * output, int * status)"""
  return _ccllib.omega_x_vec(*args)

def linear_matter_power(*args):
  """linear_matter_power(cosmology cosmo, double k, double a, int * status) -> double"""
  return _ccllib.linear_matter_power(*args)

def nonlin_matter_power(*args):
  """nonlin_matter_power(cosmology cosmo, double k, double a, int * status) -> double"""
  return _ccllib.nonlin_matter_power(*args)

def sigmaR(*args):
  """sigmaR(cosmology cosmo, double R, int * status) -> double"""
  return _ccllib.sigmaR(*args)

def sigma8(*args):
  """sigma8(cosmology cosmo, int * status) -> double"""
  return _ccllib.sigma8(*args)

def linear_matter_power_vec(*args):
  """linear_matter_power_vec(cosmology cosmo, double a, double * k, double * output, int * status)"""
  return _ccllib.linear_matter_power_vec(*args)

def nonlin_matter_power_vec(*args):
  """nonlin_matter_power_vec(cosmology cosmo, double a, double * k, double * output, int * status)"""
  return _ccllib.nonlin_matter_power_vec(*args)

def sigmaR_vec(*args):
  """sigmaR_vec(cosmology cosmo, double * R, double * output, int * status)"""
  return _ccllib.sigmaR_vec(*args)
CCL_CORR_LGNDRE = _ccllib.CCL_CORR_LGNDRE
CCL_CORR_FFTLOG = _ccllib.CCL_CORR_FFTLOG
CCL_CORR_BESSEL = _ccllib.CCL_CORR_BESSEL
CCL_CORR_GG = _ccllib.CCL_CORR_GG
CCL_CORR_GL = _ccllib.CCL_CORR_GL
CCL_CORR_LP = _ccllib.CCL_CORR_LP
CCL_CORR_LM = _ccllib.CCL_CORR_LM

def correlation(*args):
  """
    correlation(cosmology cosmo, int n_ell, double * ell, double * cls, int n_theta, double * theta, 
        double * wtheta, int corr_type, int do_taper_cl, double * taper_cl_limits, 
        int flag_method, int * status)
    """
  return _ccllib.correlation(*args)

def correlation_vec(*args):
  """
    correlation_vec(cosmology cosmo, int nlarr, int nclarr, int nt, int corr_type, int method, double * output, 
        int * status)
    """
  return _ccllib.correlation_vec(*args)

def cosmology_compute_sigma(*args):
  """cosmology_compute_sigma(cosmology cosmo, int * status)"""
  return _ccllib.cosmology_compute_sigma(*args)

def cosmology_compute_hmfparams(*args):
  """cosmology_compute_hmfparams(cosmology cosmo, int * status)"""
  return _ccllib.cosmology_compute_hmfparams(*args)

def massfunc(*args):
  """massfunc(cosmology cosmo, double smooth_mass, double a, double odelta, int * status) -> double"""
  return _ccllib.massfunc(*args)

def halo_bias(*args):
  """halo_bias(cosmology cosmo, double smooth_mass, double a, double odelta, int * status) -> double"""
  return _ccllib.halo_bias(*args)

def massfunc_m2r(*args):
  """massfunc_m2r(cosmology cosmo, double smooth_mass, int * status) -> double"""
  return _ccllib.massfunc_m2r(*args)

def sigmaM(*args):
  """sigmaM(cosmology cosmo, double smooth_mass, double a, int * status) -> double"""
  return _ccllib.sigmaM(*args)

def massfunc_vec(*args):
  """massfunc_vec(cosmology cosmo, double a, double odelta, double * halo_mass, double * output, int * status)"""
  return _ccllib.massfunc_vec(*args)

def massfunc_m2r_vec(*args):
  """massfunc_m2r_vec(cosmology cosmo, double * halo_mass, double * output, int * status)"""
  return _ccllib.massfunc_m2r_vec(*args)

def sigmaM_vec(*args):
  """sigmaM_vec(cosmology cosmo, double a, double * halo_mass, double * output, int * status)"""
  return _ccllib.sigmaM_vec(*args)

def halo_bias_vec(*args):
  """halo_bias_vec(cosmology cosmo, double a, double odelta, double * halo_mass, double * output, int * status)"""
  return _ccllib.halo_bias_vec(*args)
CL_TRACER_NC = _ccllib.CL_TRACER_NC
CL_TRACER_WL = _ccllib.CL_TRACER_WL
class CCL_ClTracer(_object):
    """Proxy of C CCL_ClTracer struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCL_ClTracer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCL_ClTracer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tracer_type"] = _ccllib.CCL_ClTracer_tracer_type_set
    __swig_getmethods__["tracer_type"] = _ccllib.CCL_ClTracer_tracer_type_get
    if _newclass:tracer_type = _swig_property(_ccllib.CCL_ClTracer_tracer_type_get, _ccllib.CCL_ClTracer_tracer_type_set)
    __swig_setmethods__["prefac_lensing"] = _ccllib.CCL_ClTracer_prefac_lensing_set
    __swig_getmethods__["prefac_lensing"] = _ccllib.CCL_ClTracer_prefac_lensing_get
    if _newclass:prefac_lensing = _swig_property(_ccllib.CCL_ClTracer_prefac_lensing_get, _ccllib.CCL_ClTracer_prefac_lensing_set)
    __swig_setmethods__["chimax"] = _ccllib.CCL_ClTracer_chimax_set
    __swig_getmethods__["chimax"] = _ccllib.CCL_ClTracer_chimax_get
    if _newclass:chimax = _swig_property(_ccllib.CCL_ClTracer_chimax_get, _ccllib.CCL_ClTracer_chimax_set)
    __swig_setmethods__["chimin"] = _ccllib.CCL_ClTracer_chimin_set
    __swig_getmethods__["chimin"] = _ccllib.CCL_ClTracer_chimin_get
    if _newclass:chimin = _swig_property(_ccllib.CCL_ClTracer_chimin_get, _ccllib.CCL_ClTracer_chimin_set)
    __swig_setmethods__["has_rsd"] = _ccllib.CCL_ClTracer_has_rsd_set
    __swig_getmethods__["has_rsd"] = _ccllib.CCL_ClTracer_has_rsd_get
    if _newclass:has_rsd = _swig_property(_ccllib.CCL_ClTracer_has_rsd_get, _ccllib.CCL_ClTracer_has_rsd_set)
    __swig_setmethods__["has_magnification"] = _ccllib.CCL_ClTracer_has_magnification_set
    __swig_getmethods__["has_magnification"] = _ccllib.CCL_ClTracer_has_magnification_get
    if _newclass:has_magnification = _swig_property(_ccllib.CCL_ClTracer_has_magnification_get, _ccllib.CCL_ClTracer_has_magnification_set)
    __swig_setmethods__["has_intrinsic_alignment"] = _ccllib.CCL_ClTracer_has_intrinsic_alignment_set
    __swig_getmethods__["has_intrinsic_alignment"] = _ccllib.CCL_ClTracer_has_intrinsic_alignment_get
    if _newclass:has_intrinsic_alignment = _swig_property(_ccllib.CCL_ClTracer_has_intrinsic_alignment_get, _ccllib.CCL_ClTracer_has_intrinsic_alignment_set)
    __swig_setmethods__["spl_nz"] = _ccllib.CCL_ClTracer_spl_nz_set
    __swig_getmethods__["spl_nz"] = _ccllib.CCL_ClTracer_spl_nz_get
    if _newclass:spl_nz = _swig_property(_ccllib.CCL_ClTracer_spl_nz_get, _ccllib.CCL_ClTracer_spl_nz_set)
    __swig_setmethods__["spl_bz"] = _ccllib.CCL_ClTracer_spl_bz_set
    __swig_getmethods__["spl_bz"] = _ccllib.CCL_ClTracer_spl_bz_get
    if _newclass:spl_bz = _swig_property(_ccllib.CCL_ClTracer_spl_bz_get, _ccllib.CCL_ClTracer_spl_bz_set)
    __swig_setmethods__["spl_sz"] = _ccllib.CCL_ClTracer_spl_sz_set
    __swig_getmethods__["spl_sz"] = _ccllib.CCL_ClTracer_spl_sz_get
    if _newclass:spl_sz = _swig_property(_ccllib.CCL_ClTracer_spl_sz_get, _ccllib.CCL_ClTracer_spl_sz_set)
    __swig_setmethods__["spl_rf"] = _ccllib.CCL_ClTracer_spl_rf_set
    __swig_getmethods__["spl_rf"] = _ccllib.CCL_ClTracer_spl_rf_get
    if _newclass:spl_rf = _swig_property(_ccllib.CCL_ClTracer_spl_rf_get, _ccllib.CCL_ClTracer_spl_rf_set)
    __swig_setmethods__["spl_ba"] = _ccllib.CCL_ClTracer_spl_ba_set
    __swig_getmethods__["spl_ba"] = _ccllib.CCL_ClTracer_spl_ba_get
    if _newclass:spl_ba = _swig_property(_ccllib.CCL_ClTracer_spl_ba_get, _ccllib.CCL_ClTracer_spl_ba_set)
    __swig_setmethods__["spl_wL"] = _ccllib.CCL_ClTracer_spl_wL_set
    __swig_getmethods__["spl_wL"] = _ccllib.CCL_ClTracer_spl_wL_get
    if _newclass:spl_wL = _swig_property(_ccllib.CCL_ClTracer_spl_wL_get, _ccllib.CCL_ClTracer_spl_wL_set)
    __swig_setmethods__["spl_wM"] = _ccllib.CCL_ClTracer_spl_wM_set
    __swig_getmethods__["spl_wM"] = _ccllib.CCL_ClTracer_spl_wM_get
    if _newclass:spl_wM = _swig_property(_ccllib.CCL_ClTracer_spl_wM_get, _ccllib.CCL_ClTracer_spl_wM_set)
    def __init__(self): 
        """__init__(CCL_ClTracer self) -> CCL_ClTracer"""
        this = _ccllib.new_CCL_ClTracer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccllib.delete_CCL_ClTracer
    __del__ = lambda self : None;
CCL_ClTracer_swigregister = _ccllib.CCL_ClTracer_swigregister
CCL_ClTracer_swigregister(CCL_ClTracer)


def cl_tracer_new(*args):
  """
    cl_tracer_new(cosmology cosmo, int tracer_type, int has_rsd, int has_magnification, int has_intrinsic_alignment, 
        int nz_n, double * z_n, double * n, int nz_b, double * z_b, 
        double * b, int nz_s, double * z_s, double * s, int nz_ba, double * z_ba, 
        double * ba, int nz_rf, double * z_rf, double * rf, int * status) -> CCL_ClTracer
    """
  return _ccllib.cl_tracer_new(*args)

def cl_tracer_number_counts_new(*args):
  """
    cl_tracer_number_counts_new(cosmology cosmo, int has_rsd, int has_magnification, int nz_n, double * z_n, double * n, 
        int nz_b, double * z_b, double * b, int nz_s, double * z_s, double * s, 
        int * status) -> CCL_ClTracer
    """
  return _ccllib.cl_tracer_number_counts_new(*args)

def cl_tracer_number_counts_simple_new(*args):
  """
    cl_tracer_number_counts_simple_new(cosmology cosmo, int nz_n, double * z_n, double * n, int nz_b, double * z_b, double * b, 
        int * status) -> CCL_ClTracer
    """
  return _ccllib.cl_tracer_number_counts_simple_new(*args)

def cl_tracer_lensing_new(*args):
  """
    cl_tracer_lensing_new(cosmology cosmo, int has_alignment, int nz_n, double * z_n, double * n, int nz_ba, 
        double * z_ba, double * ba, int nz_rf, double * z_rf, double * rf, int * status) -> CCL_ClTracer
    """
  return _ccllib.cl_tracer_lensing_new(*args)

def cl_tracer_lensing_simple_new(*args):
  """cl_tracer_lensing_simple_new(cosmology cosmo, int nz_n, double * z_n, double * n, int * status) -> CCL_ClTracer"""
  return _ccllib.cl_tracer_lensing_simple_new(*args)

def cl_tracer_free(*args):
  """cl_tracer_free(CCL_ClTracer clt)"""
  return _ccllib.cl_tracer_free(*args)

def angular_cl(*args):
  """angular_cl(cosmology cosmo, int l, CCL_ClTracer clt1, CCL_ClTracer clt2, int * status) -> double"""
  return _ccllib.angular_cl(*args)

def cl_tracer_new_wrapper(*args):
  """
    cl_tracer_new_wrapper(cosmology cosmo, int tracer_type, int has_rsd, int has_magnification, int has_intrinsic_alignment, 
        int nz_n, int nn, int nz_b, int nb, int nz_s, int ns, int nz_ba, 
        int nba, int nz_rf, int nrf, int * status) -> CCL_ClTracer
    """
  return _ccllib.cl_tracer_new_wrapper(*args)

def angular_cl_vec(*args):
  """
    angular_cl_vec(cosmology cosmo, CCL_ClTracer clt1, CCL_ClTracer clt2, double * ell, double * output, 
        int * status)
    """
  return _ccllib.angular_cl_vec(*args)
GSL_CONST_MKSA_SPEED_OF_LIGHT = _ccllib.GSL_CONST_MKSA_SPEED_OF_LIGHT
GSL_CONST_MKSA_GRAVITATIONAL_CONSTANT = _ccllib.GSL_CONST_MKSA_GRAVITATIONAL_CONSTANT
GSL_CONST_MKSA_PLANCKS_CONSTANT_H = _ccllib.GSL_CONST_MKSA_PLANCKS_CONSTANT_H
GSL_CONST_MKSA_PLANCKS_CONSTANT_HBAR = _ccllib.GSL_CONST_MKSA_PLANCKS_CONSTANT_HBAR
GSL_CONST_MKSA_ASTRONOMICAL_UNIT = _ccllib.GSL_CONST_MKSA_ASTRONOMICAL_UNIT
GSL_CONST_MKSA_LIGHT_YEAR = _ccllib.GSL_CONST_MKSA_LIGHT_YEAR
GSL_CONST_MKSA_PARSEC = _ccllib.GSL_CONST_MKSA_PARSEC
GSL_CONST_MKSA_GRAV_ACCEL = _ccllib.GSL_CONST_MKSA_GRAV_ACCEL
GSL_CONST_MKSA_ELECTRON_VOLT = _ccllib.GSL_CONST_MKSA_ELECTRON_VOLT
GSL_CONST_MKSA_MASS_ELECTRON = _ccllib.GSL_CONST_MKSA_MASS_ELECTRON
GSL_CONST_MKSA_MASS_MUON = _ccllib.GSL_CONST_MKSA_MASS_MUON
GSL_CONST_MKSA_MASS_PROTON = _ccllib.GSL_CONST_MKSA_MASS_PROTON
GSL_CONST_MKSA_MASS_NEUTRON = _ccllib.GSL_CONST_MKSA_MASS_NEUTRON
GSL_CONST_MKSA_RYDBERG = _ccllib.GSL_CONST_MKSA_RYDBERG
GSL_CONST_MKSA_BOLTZMANN = _ccllib.GSL_CONST_MKSA_BOLTZMANN
GSL_CONST_MKSA_MOLAR_GAS = _ccllib.GSL_CONST_MKSA_MOLAR_GAS
GSL_CONST_MKSA_STANDARD_GAS_VOLUME = _ccllib.GSL_CONST_MKSA_STANDARD_GAS_VOLUME
GSL_CONST_MKSA_MINUTE = _ccllib.GSL_CONST_MKSA_MINUTE
GSL_CONST_MKSA_HOUR = _ccllib.GSL_CONST_MKSA_HOUR
GSL_CONST_MKSA_DAY = _ccllib.GSL_CONST_MKSA_DAY
GSL_CONST_MKSA_WEEK = _ccllib.GSL_CONST_MKSA_WEEK
GSL_CONST_MKSA_INCH = _ccllib.GSL_CONST_MKSA_INCH
GSL_CONST_MKSA_FOOT = _ccllib.GSL_CONST_MKSA_FOOT
GSL_CONST_MKSA_YARD = _ccllib.GSL_CONST_MKSA_YARD
GSL_CONST_MKSA_MILE = _ccllib.GSL_CONST_MKSA_MILE
GSL_CONST_MKSA_NAUTICAL_MILE = _ccllib.GSL_CONST_MKSA_NAUTICAL_MILE
GSL_CONST_MKSA_FATHOM = _ccllib.GSL_CONST_MKSA_FATHOM
GSL_CONST_MKSA_MIL = _ccllib.GSL_CONST_MKSA_MIL
GSL_CONST_MKSA_POINT = _ccllib.GSL_CONST_MKSA_POINT
GSL_CONST_MKSA_TEXPOINT = _ccllib.GSL_CONST_MKSA_TEXPOINT
GSL_CONST_MKSA_MICRON = _ccllib.GSL_CONST_MKSA_MICRON
GSL_CONST_MKSA_ANGSTROM = _ccllib.GSL_CONST_MKSA_ANGSTROM
GSL_CONST_MKSA_HECTARE = _ccllib.GSL_CONST_MKSA_HECTARE
GSL_CONST_MKSA_ACRE = _ccllib.GSL_CONST_MKSA_ACRE
GSL_CONST_MKSA_BARN = _ccllib.GSL_CONST_MKSA_BARN
GSL_CONST_MKSA_LITER = _ccllib.GSL_CONST_MKSA_LITER
GSL_CONST_MKSA_US_GALLON = _ccllib.GSL_CONST_MKSA_US_GALLON
GSL_CONST_MKSA_QUART = _ccllib.GSL_CONST_MKSA_QUART
GSL_CONST_MKSA_PINT = _ccllib.GSL_CONST_MKSA_PINT
GSL_CONST_MKSA_CUP = _ccllib.GSL_CONST_MKSA_CUP
GSL_CONST_MKSA_FLUID_OUNCE = _ccllib.GSL_CONST_MKSA_FLUID_OUNCE
GSL_CONST_MKSA_TABLESPOON = _ccllib.GSL_CONST_MKSA_TABLESPOON
GSL_CONST_MKSA_TEASPOON = _ccllib.GSL_CONST_MKSA_TEASPOON
GSL_CONST_MKSA_CANADIAN_GALLON = _ccllib.GSL_CONST_MKSA_CANADIAN_GALLON
GSL_CONST_MKSA_UK_GALLON = _ccllib.GSL_CONST_MKSA_UK_GALLON
GSL_CONST_MKSA_MILES_PER_HOUR = _ccllib.GSL_CONST_MKSA_MILES_PER_HOUR
GSL_CONST_MKSA_KILOMETERS_PER_HOUR = _ccllib.GSL_CONST_MKSA_KILOMETERS_PER_HOUR
GSL_CONST_MKSA_KNOT = _ccllib.GSL_CONST_MKSA_KNOT
GSL_CONST_MKSA_POUND_MASS = _ccllib.GSL_CONST_MKSA_POUND_MASS
GSL_CONST_MKSA_OUNCE_MASS = _ccllib.GSL_CONST_MKSA_OUNCE_MASS
GSL_CONST_MKSA_TON = _ccllib.GSL_CONST_MKSA_TON
GSL_CONST_MKSA_METRIC_TON = _ccllib.GSL_CONST_MKSA_METRIC_TON
GSL_CONST_MKSA_UK_TON = _ccllib.GSL_CONST_MKSA_UK_TON
GSL_CONST_MKSA_TROY_OUNCE = _ccllib.GSL_CONST_MKSA_TROY_OUNCE
GSL_CONST_MKSA_CARAT = _ccllib.GSL_CONST_MKSA_CARAT
GSL_CONST_MKSA_UNIFIED_ATOMIC_MASS = _ccllib.GSL_CONST_MKSA_UNIFIED_ATOMIC_MASS
GSL_CONST_MKSA_GRAM_FORCE = _ccllib.GSL_CONST_MKSA_GRAM_FORCE
GSL_CONST_MKSA_POUND_FORCE = _ccllib.GSL_CONST_MKSA_POUND_FORCE
GSL_CONST_MKSA_KILOPOUND_FORCE = _ccllib.GSL_CONST_MKSA_KILOPOUND_FORCE
GSL_CONST_MKSA_POUNDAL = _ccllib.GSL_CONST_MKSA_POUNDAL
GSL_CONST_MKSA_CALORIE = _ccllib.GSL_CONST_MKSA_CALORIE
GSL_CONST_MKSA_BTU = _ccllib.GSL_CONST_MKSA_BTU
GSL_CONST_MKSA_THERM = _ccllib.GSL_CONST_MKSA_THERM
GSL_CONST_MKSA_HORSEPOWER = _ccllib.GSL_CONST_MKSA_HORSEPOWER
GSL_CONST_MKSA_BAR = _ccllib.GSL_CONST_MKSA_BAR
GSL_CONST_MKSA_STD_ATMOSPHERE = _ccllib.GSL_CONST_MKSA_STD_ATMOSPHERE
GSL_CONST_MKSA_TORR = _ccllib.GSL_CONST_MKSA_TORR
GSL_CONST_MKSA_METER_OF_MERCURY = _ccllib.GSL_CONST_MKSA_METER_OF_MERCURY
GSL_CONST_MKSA_INCH_OF_MERCURY = _ccllib.GSL_CONST_MKSA_INCH_OF_MERCURY
GSL_CONST_MKSA_INCH_OF_WATER = _ccllib.GSL_CONST_MKSA_INCH_OF_WATER
GSL_CONST_MKSA_PSI = _ccllib.GSL_CONST_MKSA_PSI
GSL_CONST_MKSA_POISE = _ccllib.GSL_CONST_MKSA_POISE
GSL_CONST_MKSA_STOKES = _ccllib.GSL_CONST_MKSA_STOKES
GSL_CONST_MKSA_STILB = _ccllib.GSL_CONST_MKSA_STILB
GSL_CONST_MKSA_LUMEN = _ccllib.GSL_CONST_MKSA_LUMEN
GSL_CONST_MKSA_LUX = _ccllib.GSL_CONST_MKSA_LUX
GSL_CONST_MKSA_PHOT = _ccllib.GSL_CONST_MKSA_PHOT
GSL_CONST_MKSA_FOOTCANDLE = _ccllib.GSL_CONST_MKSA_FOOTCANDLE
GSL_CONST_MKSA_LAMBERT = _ccllib.GSL_CONST_MKSA_LAMBERT
GSL_CONST_MKSA_FOOTLAMBERT = _ccllib.GSL_CONST_MKSA_FOOTLAMBERT
GSL_CONST_MKSA_CURIE = _ccllib.GSL_CONST_MKSA_CURIE
GSL_CONST_MKSA_ROENTGEN = _ccllib.GSL_CONST_MKSA_ROENTGEN
GSL_CONST_MKSA_RAD = _ccllib.GSL_CONST_MKSA_RAD
GSL_CONST_MKSA_SOLAR_MASS = _ccllib.GSL_CONST_MKSA_SOLAR_MASS
GSL_CONST_MKSA_BOHR_RADIUS = _ccllib.GSL_CONST_MKSA_BOHR_RADIUS
GSL_CONST_MKSA_NEWTON = _ccllib.GSL_CONST_MKSA_NEWTON
GSL_CONST_MKSA_DYNE = _ccllib.GSL_CONST_MKSA_DYNE
GSL_CONST_MKSA_JOULE = _ccllib.GSL_CONST_MKSA_JOULE
GSL_CONST_MKSA_ERG = _ccllib.GSL_CONST_MKSA_ERG
GSL_CONST_MKSA_STEFAN_BOLTZMANN_CONSTANT = _ccllib.GSL_CONST_MKSA_STEFAN_BOLTZMANN_CONSTANT
GSL_CONST_MKSA_THOMSON_CROSS_SECTION = _ccllib.GSL_CONST_MKSA_THOMSON_CROSS_SECTION
GSL_CONST_MKSA_BOHR_MAGNETON = _ccllib.GSL_CONST_MKSA_BOHR_MAGNETON
GSL_CONST_MKSA_NUCLEAR_MAGNETON = _ccllib.GSL_CONST_MKSA_NUCLEAR_MAGNETON
GSL_CONST_MKSA_ELECTRON_MAGNETIC_MOMENT = _ccllib.GSL_CONST_MKSA_ELECTRON_MAGNETIC_MOMENT
GSL_CONST_MKSA_PROTON_MAGNETIC_MOMENT = _ccllib.GSL_CONST_MKSA_PROTON_MAGNETIC_MOMENT
GSL_CONST_MKSA_FARADAY = _ccllib.GSL_CONST_MKSA_FARADAY
GSL_CONST_MKSA_ELECTRON_CHARGE = _ccllib.GSL_CONST_MKSA_ELECTRON_CHARGE
GSL_CONST_MKSA_VACUUM_PERMITTIVITY = _ccllib.GSL_CONST_MKSA_VACUUM_PERMITTIVITY
GSL_CONST_MKSA_VACUUM_PERMEABILITY = _ccllib.GSL_CONST_MKSA_VACUUM_PERMEABILITY
GSL_CONST_MKSA_DEBYE = _ccllib.GSL_CONST_MKSA_DEBYE
GSL_CONST_MKSA_GAUSS = _ccllib.GSL_CONST_MKSA_GAUSS
M_PI = _ccllib.M_PI
K_PIVOT = _ccllib.K_PIVOT
CLIGHT_HMPC = _ccllib.CLIGHT_HMPC
GNEWT = _ccllib.GNEWT
SOLAR_MASS = _ccllib.SOLAR_MASS
MPC_TO_METER = _ccllib.MPC_TO_METER
PC_TO_METER = _ccllib.PC_TO_METER
RHO_CRITICAL = _ccllib.RHO_CRITICAL
KBOLTZ = _ccllib.KBOLTZ
STBOLTZ = _ccllib.STBOLTZ
HPLANCK = _ccllib.HPLANCK
CLIGHT = _ccllib.CLIGHT
EV_IN_J = _ccllib.EV_IN_J
TNCDM = _ccllib.TNCDM
EPSREL_DIST = _ccllib.EPSREL_DIST
EPSREL_GROWTH = _ccllib.EPSREL_GROWTH
EPSREL_DNDZ = _ccllib.EPSREL_DNDZ
EPS_SCALEFAC_GROWTH = _ccllib.EPS_SCALEFAC_GROWTH
EPSREL_CORR_FUNC = _ccllib.EPSREL_CORR_FUNC
GSL_INTEGRATION_LIMIT = _ccllib.GSL_INTEGRATION_LIMIT
Z_MIN_SOURCES = _ccllib.Z_MIN_SOURCES
Z_MAX_SOURCES = _ccllib.Z_MAX_SOURCES
class user_pz_info(_object):
    """Proxy of C user_pz_info struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, user_pz_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, user_pz_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["your_pz_func"] = _ccllib.user_pz_info_your_pz_func_set
    __swig_getmethods__["your_pz_func"] = _ccllib.user_pz_info_your_pz_func_get
    if _newclass:your_pz_func = _swig_property(_ccllib.user_pz_info_your_pz_func_get, _ccllib.user_pz_info_your_pz_func_set)
    __swig_setmethods__["your_pz_params"] = _ccllib.user_pz_info_your_pz_params_set
    __swig_getmethods__["your_pz_params"] = _ccllib.user_pz_info_your_pz_params_get
    if _newclass:your_pz_params = _swig_property(_ccllib.user_pz_info_your_pz_params_get, _ccllib.user_pz_info_your_pz_params_set)
    def __init__(self): 
        """__init__(user_pz_info self) -> user_pz_info"""
        this = _ccllib.new_user_pz_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccllib.delete_user_pz_info
    __del__ = lambda self : None;
user_pz_info_swigregister = _ccllib.user_pz_info_swigregister
user_pz_info_swigregister(user_pz_info)


def specs_bias_clustering(*args):
  """specs_bias_clustering(cosmology cosmo, double a, int * status) -> double"""
  return _ccllib.specs_bias_clustering(*args)

def specs_dNdz_tomog(*args):
  """
    specs_dNdz_tomog(double z, int dNdz_type, double bin_zmin, double bin_zmax, user_pz_info user_info, 
        double * tomoout, int * status)
    """
  return _ccllib.specs_dNdz_tomog(*args)

def specs_create_photoz_info(*args):
  """specs_create_photoz_info(void * user_params, double (*)(double,double,void *,int *) user_pz_func) -> user_pz_info"""
  return _ccllib.specs_create_photoz_info(*args)

def specs_create_gaussian_photoz_info(*args):
  """specs_create_gaussian_photoz_info(double sigma_z0) -> user_pz_info"""
  return _ccllib.specs_create_gaussian_photoz_info(*args)

def specs_free_photoz_info(*args):
  """specs_free_photoz_info(user_pz_info my_photoz_info)"""
  return _ccllib.specs_free_photoz_info(*args)

def specs_free_photoz_info_gaussian(*args):
  """specs_free_photoz_info_gaussian(user_pz_info my_photoz_info)"""
  return _ccllib.specs_free_photoz_info_gaussian(*args)

def specs_sigmaz_clustering(*args):
  """specs_sigmaz_clustering(double z) -> double"""
  return _ccllib.specs_sigmaz_clustering(*args)

def specs_sigmaz_sources(*args):
  """specs_sigmaz_sources(double z) -> double"""
  return _ccllib.specs_sigmaz_sources(*args)
DNDZ_WL_CONS = _ccllib.DNDZ_WL_CONS
DNDZ_WL_FID = _ccllib.DNDZ_WL_FID
DNDZ_WL_OPT = _ccllib.DNDZ_WL_OPT
DNDZ_NC = _ccllib.DNDZ_NC

def specs_bias_clustering_vec(*args):
  """specs_bias_clustering_vec(cosmology cosmo, double * a, double * output, int * status)"""
  return _ccllib.specs_bias_clustering_vec(*args)

def specs_sigmaz_clustering_vec(*args):
  """specs_sigmaz_clustering_vec(double * z, double * output)"""
  return _ccllib.specs_sigmaz_clustering_vec(*args)

def specs_sigmaz_sources_vec(*args):
  """specs_sigmaz_sources_vec(double * z, double * output)"""
  return _ccllib.specs_sigmaz_sources_vec(*args)

def specs_dNdz_tomog_vec(*args):
  """
    specs_dNdz_tomog_vec(int dNdz_type, double bin_zmin, double bin_zmax, user_pz_info user_info, double * z, 
        double * output, int * status)
    """
  return _ccllib.specs_dNdz_tomog_vec(*args)

def call_py_photoz_fn(*args):
  """call_py_photoz_fn(double z_ph, double z_s, void * py_func_obj, int * status) -> double"""
  return _ccllib.call_py_photoz_fn(*args)

def specs_create_photoz_info_from_py(*args):
  """specs_create_photoz_info_from_py(PyObject * pyfunc) -> user_pz_info"""
  return _ccllib.specs_create_photoz_info_from_py(*args)
emulator = _ccllib.emulator
none = _ccllib.none
fitting_function = _ccllib.fitting_function
eisenstein_hu = _ccllib.eisenstein_hu
bbks = _ccllib.bbks
boltzmann = _ccllib.boltzmann
boltzmann_class = _ccllib.boltzmann_class
boltzmann_camb = _ccllib.boltzmann_camb
linear = _ccllib.linear
halofit = _ccllib.halofit
halo_model = _ccllib.halo_model
tinker = _ccllib.tinker
tinker10 = _ccllib.tinker10
watson = _ccllib.watson
angulo = _ccllib.angulo
class configuration(_object):
    """Proxy of C ccl_configuration struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, configuration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, configuration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["transfer_function_method"] = _ccllib.configuration_transfer_function_method_set
    __swig_getmethods__["transfer_function_method"] = _ccllib.configuration_transfer_function_method_get
    if _newclass:transfer_function_method = _swig_property(_ccllib.configuration_transfer_function_method_get, _ccllib.configuration_transfer_function_method_set)
    __swig_setmethods__["matter_power_spectrum_method"] = _ccllib.configuration_matter_power_spectrum_method_set
    __swig_getmethods__["matter_power_spectrum_method"] = _ccllib.configuration_matter_power_spectrum_method_get
    if _newclass:matter_power_spectrum_method = _swig_property(_ccllib.configuration_matter_power_spectrum_method_get, _ccllib.configuration_matter_power_spectrum_method_set)
    __swig_setmethods__["mass_function_method"] = _ccllib.configuration_mass_function_method_set
    __swig_getmethods__["mass_function_method"] = _ccllib.configuration_mass_function_method_get
    if _newclass:mass_function_method = _swig_property(_ccllib.configuration_mass_function_method_get, _ccllib.configuration_mass_function_method_set)
    def __init__(self): 
        """__init__(ccl_configuration self) -> configuration"""
        this = _ccllib.new_configuration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccllib.delete_configuration
    __del__ = lambda self : None;
configuration_swigregister = _ccllib.configuration_swigregister
configuration_swigregister(configuration)

CCL_ERROR_MEMORY = _ccllib.CCL_ERROR_MEMORY
CCL_ERROR_LINSPACE = _ccllib.CCL_ERROR_LINSPACE
CCL_ERROR_INCONSISTENT = _ccllib.CCL_ERROR_INCONSISTENT
CCL_ERROR_SPLINE = _ccllib.CCL_ERROR_SPLINE
CCL_ERROR_SPLINE_EV = _ccllib.CCL_ERROR_SPLINE_EV
CCL_ERROR_INTEG = _ccllib.CCL_ERROR_INTEG
CCL_ERROR_ROOT = _ccllib.CCL_ERROR_ROOT
CCL_ERROR_CLASS = _ccllib.CCL_ERROR_CLASS
CCL_ERROR_COMPUTECHI = _ccllib.CCL_ERROR_COMPUTECHI
CCL_ERROR_MF = _ccllib.CCL_ERROR_MF
CCL_ERROR_HMF_INTERP = _ccllib.CCL_ERROR_HMF_INTERP
CCL_ERROR_PARAMETERS = _ccllib.CCL_ERROR_PARAMETERS
CCL_ERROR_NU_INT = _ccllib.CCL_ERROR_NU_INT
CCL_ERROR_POLICY_EXIT = _ccllib.CCL_ERROR_POLICY_EXIT
CCL_ERROR_POLICY_CONTINUE = _ccllib.CCL_ERROR_POLICY_CONTINUE

def raise_exception(*args):
  """raise_exception(int err, char * msg)"""
  return _ccllib.raise_exception(*args)

def set_error_policy(*args):
  """set_error_policy(CCLErrorPolicy error_policy)"""
  return _ccllib.set_error_policy(*args)

def check_status(*args):
  """check_status(cosmology cosmo, int * status)"""
  return _ccllib.check_status(*args)

def check_status_nocosmo(*args):
  """check_status_nocosmo(int * status)"""
  return _ccllib.check_status_nocosmo(*args)

def linear_spacing(*args):
  """linear_spacing(double xmin, double xmax, int N) -> double *"""
  return _ccllib.linear_spacing(*args)

def log_spacing(*args):
  """log_spacing(double xmin, double xmax, int N) -> double *"""
  return _ccllib.log_spacing(*args)
class SplPar(_object):
    """Proxy of C SplPar struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplPar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplPar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["intacc"] = _ccllib.SplPar_intacc_set
    __swig_getmethods__["intacc"] = _ccllib.SplPar_intacc_get
    if _newclass:intacc = _swig_property(_ccllib.SplPar_intacc_get, _ccllib.SplPar_intacc_set)
    __swig_setmethods__["spline"] = _ccllib.SplPar_spline_set
    __swig_getmethods__["spline"] = _ccllib.SplPar_spline_get
    if _newclass:spline = _swig_property(_ccllib.SplPar_spline_get, _ccllib.SplPar_spline_set)
    __swig_setmethods__["x0"] = _ccllib.SplPar_x0_set
    __swig_getmethods__["x0"] = _ccllib.SplPar_x0_get
    if _newclass:x0 = _swig_property(_ccllib.SplPar_x0_get, _ccllib.SplPar_x0_set)
    __swig_setmethods__["xf"] = _ccllib.SplPar_xf_set
    __swig_getmethods__["xf"] = _ccllib.SplPar_xf_get
    if _newclass:xf = _swig_property(_ccllib.SplPar_xf_get, _ccllib.SplPar_xf_set)
    __swig_setmethods__["y0"] = _ccllib.SplPar_y0_set
    __swig_getmethods__["y0"] = _ccllib.SplPar_y0_get
    if _newclass:y0 = _swig_property(_ccllib.SplPar_y0_get, _ccllib.SplPar_y0_set)
    __swig_setmethods__["yf"] = _ccllib.SplPar_yf_set
    __swig_getmethods__["yf"] = _ccllib.SplPar_yf_get
    if _newclass:yf = _swig_property(_ccllib.SplPar_yf_get, _ccllib.SplPar_yf_set)
    def __init__(self): 
        """__init__(SplPar self) -> SplPar"""
        this = _ccllib.new_SplPar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccllib.delete_SplPar
    __del__ = lambda self : None;
SplPar_swigregister = _ccllib.SplPar_swigregister
SplPar_swigregister(SplPar)
cvar = _ccllib.cvar
default_config = cvar.default_config


def spline_init(*args):
  """spline_init(int n, double * x, double * y, double y0, double yf) -> SplPar"""
  return _ccllib.spline_init(*args)

def spline_eval(*args):
  """spline_eval(double x, SplPar spl) -> double"""
  return _ccllib.spline_eval(*args)

def spline_free(*args):
  """spline_free(SplPar spl)"""
  return _ccllib.spline_free(*args)
# This file is compatible with both classic and new-style classes.


